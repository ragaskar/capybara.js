# ------------ rake task options ------------
# lint engine - choose 'jshint' or 'jslint'
# JSLint is more strict, JSHint is more indulgent and has more options

lint_engine: jshint

# JS files to check by default, if no parameters are passed to 'rake jslint'
# (you may want to limit this only to your own scripts and exclude any external scripts and frameworks)

# this can be overridden by adding 'paths' and 'exclude_paths' parameter to rake command:
#   rake jslint paths=path1,path2,... exclude_paths=library1,library2,...

paths:
  - app/assets/javascripts/**/*.js
  - spec/javascripts/**/*.js

exclude_paths:
  - spec/javascripts/helpers/jasmine-jquery.js

# ------------ common options for both jslint and jshint ------------
# enforcing options (true means potentially more warnings)

bitwise:  true      # true if bitwise operators should not be allowed
newcap:   true      # true if Initial Caps must be used with constructor functions
nomen:    true     # true if initial or trailing underscore in identifiers should be forbidden
plusplus: false     # true if ++ and -- should not be allowed
regexp:   false     # true if . and [^...] should not be allowed in RegExp literals
undef:    true     # true if variables must be declared before used
white:    false     # true if strict whitespace rules apply (see also 'indent' option)

# relaxing options (false means potentially more warnings)

debug:    false     # true if debugger statements should be allowed (set to false before going into production)
es5:      true      # true if ECMAScript 5 syntax should be allowed
evil:     false     # true if eval should be allowed
forin:    false      # true if unfiltered 'for in' statements should be allowed
sub:      false     # true if subscript notation may be used for expressions better expressed in dot notation

# other options

maxlen:   120       # Maximum line length
indent:   2         # Number of spaces that should be used for indentation - used only if 'white' option is set
maxerr:   50        # The maximum number of warnings reported (per file)
passfail: false     # true if the scan should stop on first error (per file)

# following are relevant only if undef = true

predef:   'beforeEach,afterEach,it,expect,describe,spyOn,jasmine,Capybara'        # Names of predefined global variables - comma-separated string or a YAML array
browser:  true      # true if the standard browser globals should be predefined
node:     false     # true if Node.js globals should be predefined
rhino:    false     # true if the Rhino environment globals should be predefined
devel:    true      # true if functions like alert, confirm, console, prompt etc. are predefined


# ------------ JSLint options ------------
# see http://www.jslint.com/lint.html#options for more detailed explanations
# feel free to delete this section if you use JSHint (the default engine)

# enforcing options (true means potentially more warnings)

adsafe:   false     # true if ADsafe rules should be enforced. See http://www.ADsafe.org/
safe:     false     # true if the safe subset rules are enforced (used by ADsafe)

# relaxing options (false means potentially more warnings)

cap:      false     # true if upper case HTML should be allowed
continue: true      # true if the continuation statement should be tolerated
css:      true      # true if CSS workarounds should be tolerated
eqeq:     true      # true if == should be allowed
fragment: true      # true if HTML fragments should be allowed
on:       false     # true if HTML event handlers (e.g. onclick="...") should be allowed
sloppy:   true      # true if the 'use strict'; pragma is optional
type:     true      # true if types can be used inconsistently
unparam:  false     # true if unused parameters should be tolerated
vars:     false      # true if multiple var statements per function should be allowed

# other options (if undef = true)

windows:  false     # true if Windows-specific globals should be predefined
widget:   false     # true if the Yahoo Widgets globals should be predefined


# ------------ JSHint options ------------
# see http://www.jshint.com/#docs for more detailed explanations

# enforcing options (true means potentially more warnings)

curly:        true    # true if using blocks with structured elements such as if and while should be required
eqeqeq:       true   # true if using === and !== for all comparisons should be required
immed:        true   # true if immediate function invocations must be wrapped in parens
latedef:      true    # true if the use of variables before definition should not be tolerated
noarg:        true    # true if the use of arguments.caller and arguments.callee should be prohibited
noempty:      true    # true if empty blocks should be prohibited
nonew:        true   # true if the use of constructors for side-effects should be prohibited
onevar:       true   # true if only one var statement per function should be allowed
strict:       false   # true if the "use strict"; pragma should be required
trailing:     true    # true if trailing whitespace rules apply

# relaxing options (false means potentially more warnings)

asi:          false   # true if the use of automatic semicolon insertion should be tolerated
boss:         false   # true if assignments inside structured elements like if, for, while should be tolerated
eqnull:       false   # true if using "== null" should be allowed
expr:         true    # true if expressions can be used as statements
globalstrict: false   # true if global "use strict"; should be allowed (also enables 'strict')
lastsemic:    false    # true if final semicolon can be skipped in one-line blocks
laxbreak:     false   # true if line breaks should not be checked
loopfunc:     false    # true if functions should be allowed to be defined within loops
regexdash:    false   # true if unescaped last dash (-) inside brackets should be tolerated
scripturl:    true    # true if script-targeted URLs should be tolerated
shadow:       false   # true if variable shadowing should be tolerated
supernew:     false   # true if "new function () { ... };" and "new Object;" should be tolerated

# other options (if undef = true)

couch:        false   # true if CouchDB globals should be predefined
jquery:       true    # true if jQuery globals should be predefined
mootools:     false   # true if CouchDB globals should be predefined
prototypejs:  false    # true if PrototypeJS globals should be predefined
wsh:          false   # true if the Windows Scripting Host globals should be predefined
